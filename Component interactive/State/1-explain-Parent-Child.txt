Great work! Stateless components updating their parents' state is a React pattern that you'll see more and more. Learning to recognize it will help you understand how React apps are organized.

The Pattern: this pattern used here is actually part of a larger pattern: a stateful, parent component passes down an event handler to a stateless, child component. The child component then uses that event handler to update its parent's state.

There's something strange going on, though!

Take a look at changeName. You can see that it calls this.setState.

In order for changeName to work, the "this" in this.setState must be the instructions object of the Parent class. You're trying to set a <Parent />'s state, not some other type of component's state.

The meaning of this is determined when a function is called, not when when a function is defined. changeName is called by an event listener... on a <Child />. Shouldn't that make this point to the instructions object of the Child class, instead of the Parent class?

You'd think that it would! Fortunately it doesn't happen that way, thanks to some React magic called automatic binding.

Automatic binding allows you to pass functions as props, and any this values in the functions' bodies will automatically refer to whatever they referred to when the function was defined. No binding to worry about!

https://facebook.github.io/react/blog/2013/07/02/react-v0-4-autobind-by-default.html
-----------------------------------------------------------------------------------------

One of the very first things that you learned about components is that they should only have one job.

In this lesson, Child had two jobs:

1 - Child displayed a name.

2 - Child offered a way to change that name.

ou should make like Solomon and divide Child in two: one component for displaying the name, and a different component for allowing a user to change the name. 
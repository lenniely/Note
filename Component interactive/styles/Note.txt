There are many different ways to use styles in React. This lesson is focused on one of them: inline styles.

An inline style is a style that's written as an attribute, like this:

<h1 style={{ color: 'red' }}>Hello world</h1>

Notice the double curly braces. What are those for?

The outer curly braces inject JavaScript into JSX. They say, "everything between us should be read as JavaScript, not JSX."

The inner curly braces create a JavaScript object literal. They make this a valid JavaScript object:

{ color: 'red' }

If you inject an object literal into JSX, and your entire injection is only that object literal, then you will end up with double curly braces. There's nothing unusual about how they work, but they look funny and can be confusing.

var React = require('react');
var ReactDOM = require('react-dom');

var styleMe = <h1 style={{background: 'lightblue', color:'darkred'}}>Please style me!  I am so bland!</h1>;

ReactDOM.render(
	styleMe, 
	document.getElementById('app')
);
---------------------------------------------------------------------------------------

var React = require('react');
var ReactDOM = require('react-dom');
var styles = {
  background: 'lightblue',
  color:      'darkred'
};

var styleMe = <h1 style={styles}>Please style me!  I am so bland!</h1>;

ReactDOM.render(
	styleMe, 
	document.getElementById('app')
);
-----------------------------------------------------------------------------------------

In regular JavaScript, style names are written in hyphenated-lowercase:

var styles = {
  'margin-top':       "20px",
  'background-color': "green"
};

In React, those same names are instead written in camelCase:

var styles = {
  marginTop:       "20px",
  backgroundColor: "green"
};

This has zero effect on style property values, only on style property names.
------------------------------------------------------------------------------------------

In regular JS, style values are almost always strings. Even if a style value is numeric, you usually have to write it as a string so that you can specify a unit. For example, you have to write "450px" or "20%".

In React, if you write a style value as a number, then the unit "px" is assumed.

How convenient! If you want a font size of 30px, you can write:

{ fontSize: 30 }

If you want to use units other than "px," you can use a string:

{ fontSize: "2em" }

Specifying "px" with a string will still work, although it's redundant.

A few specific styles will not automatically fill in the "px" for you. These are styles where you aren't likely to use "px" anyway, so you don't really have to worry about it. Here is a list of styles that don't assume "px". 
https://facebook.github.io/react/docs/dom-elements.html
-----------------------------------------------------------------------------------------

One way to make styles reusable is to keep them in a separate JavaScript file. This file should export the styles that you want to reuse, via module.exports. You can then require your styles into any component that wants them.

In the code editor, move back and forth between facebookStyles.js and FacebookColorThief.js to see a styles file in action.

-------------------------------------------------------------------------------------------
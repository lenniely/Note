In this lesson, you will learn to use an important React feature called propTypes.

propTypes are useful for two reasons. The first reason is prop validation.

Validation can ensure that your props are doing what they're supposed to be doing. If props are missing, or if they're present but they aren't what you're expecting, then a warning will print in the console.

This is useful, but reason #2 is arguably more useful: documentation.

Documenting props makes it easier to glance at a file and quickly understand the component class inside. When you have a lot of files, and you will, this can be a huge benefit.
-------------------------------------------------------------------------------------

If a component class expects a prop, then you can give that component class a propType!

The first step to making a propType is to search for a property named propTypes on the instructions object. If there isn't one, make one! Put it at the top of the instructions object, so that it'll be easy to spot if you end up searching for it again.

See the example of a propTypes property on below example. Notice that the value of propTypes is an object, not a function!

The second step is to add a property to the propTypes object. For each prop that your component class expects to receive, there can be one property on your propTypes object.

var React = require('react');

var MessageDisplayer = React.createClass({
  // This propTypes object should have
  // one property for each expected prop:
  propTypes: {
    message: React.PropTypes.string
  },

  render: function () {
    return <h1>{this.props.message}</h1>;
  }
});

The value of each property in propTypes should fit this pattern:  React.PropTypes.expected-data-type-goes-here

Notice the difference in capitalization between the propTypes object and React.PropTypes!

Each property on the propTypes object is called a propType.

For a propType, note that bool and func are abbreviated, but all other datatypes are spelled normally.

If you add .isRequired to a propType, then you will get a console warning if that prop isn't sent.

var React = require('react');

var Runner = React.createClass({
  propTypes: {
    message:   React.PropTypes.string.isRequired,
    style:     React.PropTypes.object.isRequired,
    isMetric:  React.PropTypes.bool.isRequired,
    miles:     React.PropTypes.number.isRequired,
    milesToKM: React.PropTypes.func.isRequired,
    races:     React.PropTypes.array.isRequired
  },

  render: function () {
    var miles = this.props.miles;
    var km = this.props.milesToKM(miles);
    var races = this.props.races.map(function(race, i){
      return <li key={race + i}>{race}</li>;
    });

    return (
      <div style={this.props.style}>
        <h1>{this.props.message}</h1>
        { this.props.isMetric && 
          <h2>One Time I Ran {km} Kilometers!</h2> }
        { !this.props.isMetric && 
          <h2>One Time I Ran {miles} Miles!</h2> }
        <h3>Races I've Run</h3>
        <ul id="races">{races}</ul>
      </div>
    );
  }
});
------------------------------------------------------------------------------------

How could you write propTypes for a stateless functional component?

You couldn't do it in the usual way! The usual way involves adding a propTypes property to the instructions object. Stateless functional components don't have instructions objects:

// Usual way:
var Example = React.createClass({
  propTypes: {
    isExample: true
  },
  ...

// Stateless functional component way:
function Example (props) {
  // ummm ??????

To write propTypes for a stateless functional component, you define a propTypes object, as a property of the stateless functional component itself. Here's what that looks like:

function Example (props) {
  return <h1>{props.message}</h1>;
}

Example.propTypes = {
  message: React.PropTypes.string.isRequired
};
--------------------------------------------------------------------------------------



